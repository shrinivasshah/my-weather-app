{"version":3,"sources":["components/CardView.js","components/Searchbar.js","components/App.js","index.js"],"names":["CardView","props","className","style","textAlign","city","date","icon","temp","renderCelcius","min","max","minMaxTemp","tempMin","tempMax","description","Searchbar","error","role","onSubmit","loadWeather","type","name","autoComplete","placeholder","today","Date","getFullYear","getMonth","getDate","App","getWeather","e","a","preventDefault","defVal","target","elements","value","slice","indexOf","trim","country","axios","get","response","console","log","setState","data","sys","main","temp_min","temp_max","weather","celcius","getWeatherIcon","weatherIcon","id","state","Thunderstorm","Drizzle","Rain","Snow","Atomsphere","clear","Clouds","icons","rangeId","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7121bbda.chunk.js","sourcesContent":["import React from 'react';\nimport './cardView.css'\nimport \"weather-icons/css/weather-icons.css\";\n\n\n\nfunction minMaxTemp(min, max) {\n    if(min && max){return (\n      <h3>\n        <span className=\"px-4 location\">{min}&deg;</span>\n        <span className=\"px-4 location\">{max}&deg;</span>\n      </h3>\n    );}\n  }\n\nfunction renderCelcius(temp){\n  if(!temp){\n    return \n  }\n  return <h1 className=\"py-2 temp\">{temp}&deg;C</h1>\n}\n\nconst CardView = (props) =>{\n  \n    return (\n    <div className=\"location-box container text-light\">\n        <div className=\"cards pt-4\" style={{ textAlign: \"center\" }}>\n          <h1 className=\"location\">\n            {props.city}\n          </h1>\n          <h2 className=\"location\">{props.date}</h2>\n          <h5 className=\"py-4\">\n            <i className={`wi ${props.icon} location display-1`} />\n          </h5>\n          <div className=\"weather-box\">\n          {renderCelcius(props.temp)}\n          {/* show min max temp */}\n          {minMaxTemp(props.tempMin, props.tempMax)}\n          </div>\n          <h3 className=\"py-3 temp location\" >{props.description}</h3>\n        </div>\n      </div>)\n}\n\nexport default CardView","import React from \"react\";\nimport \"./Searchbar.css\";\nconst Searchbar = (props) => {\n  return (\n    <div className=\"search-box\" style={{textAlign:\"center\"}}>\n    <div>{props.error?error():null}</div>\n      <form onSubmit={props.loadWeather}>\n        <div className=\"\">\n          <div className=\"\">\n            <input\n              type=\"text\"\n              className=\"search-bar\"\n              name=\"city\"\n              autoComplete=\"off\"\n              placeholder=\"City, Country\"\n            />\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nfunction error(){\n  return (\n    <div className=\"alert alert-danger mx-5\" role=\"alert\">\n      Please city and country\n    </div>\n  )\n}\n\n\nexport default Searchbar;\n","import axios from \"axios\";\nimport React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\";\nimport CardView from \"./CardView\";\nimport Searchbar from \"./Searchbar\";\nimport './App.css'\n\n\nconst API = \"b0b6a9895b910046e1bced3fcf822df6\";\nvar today = new Date();\nvar date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: \"\",\n      temp: null,\n      tempMin: null,\n      tempMax: null,\n      description: \"\",\n      icon: \"\",\n      error:false,\n      date: '',      \n    };\n    \n    \n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atomsphere: \"wi-fog\",\n      clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\",\n    };\n  }\n  getWeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({ icon: this.weatherIcon.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: this.weatherIcon.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({ icon: this.weatherIcon.Rain });\n        break;\n      case rangeId >= 600 && rangeId < 622:\n        this.setState({ icon: this.weatherIcon.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: this.weatherIcon.Atomsphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: this.weatherIcon.clear });\n        break;\n      case rangeId >= 801 && rangeId < 804:\n        this.setState({ icon: this.weatherIcon.Clouds });\n        break;\n      default:\n        this.setState({ icon: this.weatherIcon.Clouds });\n    }\n  }\n  getWeather = async (e) => {\n\n    e.preventDefault();\n\n    let defVal = e.target.elements.city.value\n\n    const city= defVal.slice(0,defVal.indexOf(',')).trim()\n    const country= defVal.slice(defVal.indexOf(',')+1).trim()\n    e.target.elements.city.value = ''\n    if (country && city){\n      const response = await axios.get(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=metric&appid=${API}`\n      );\n      console.log(response);\n      this.setState({\n        city: `${response.data.name}, ${response.data.sys.country} `,\n        temp: response.data.main.temp,\n        tempMin: response.data.main.temp_min,\n        tempMax: response.data.main.temp_max,\n        description: response.data.weather[0].description,\n        date:date,\n        celcius:`&deg;`\n      });\n      this.getWeatherIcon(this.weatherIcon, response.data.weather[0].id);\n    }\n    else{\n      this.setState({error:true});\n    }\n    \n  };\n\n  render() {\n    const bgColor =(icon) =>{\n      \n\n      if (icon.includes('thunderstorm')){\n        return '.thunderstorm';\n      }else if(icon.includes('sleet')){\n        return '.sleet'\n      }else if(icon.includes('storm')){\n        return '.storm'\n      }else if(icon.includes('fog')){\n        return '.fog'\n      }else if(icon.includes('sunny')){\n        return '.sunny'\n      }else{\n        return '.default'\n      }\n    }\n\n    \n    return (\n      <div className=\"main default\">\n        <Searchbar loadWeather={this.getWeather} error={this.state.error}/>\n        <CardView\n          city={this.state.city}\n          country={this.state.country}\n          temp={this.state.temp}\n          tempMin={this.state.tempMin}\n          tempMax={this.state.tempMax}\n          description={this.state.description}\n          icon={this.state.icon}\n          date={this.state.date}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\n\n\n\n\nReactDOM.render(<App/>,document.getElementById('root'))"],"sourceRoot":""}